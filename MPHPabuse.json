local MPHPAbuse = {}
MPHPAbuse.optionEnable = Menu.AddOption({"Utility", "MP/HP Abuse"}, "Enable", "")
MPHPAbuse.optionToggleKey = Menu.AddKeyOption({"Utility", "MP/HP Abuse"}, "Toggle Key", Enum.ButtonCode.KEY_NONE)
MPHPAbuse.optionBackPackAbuseKey = Menu.AddKeyOption({"Utility", "MP/HP Abuse"}, "Key to quick abuse items to backpack", Enum.ButtonCode.KEY_NONE)
MPHPAbuse.threshold = Menu.AddOption({"Utility", "MP/HP Abuse"}, "HP Percent Threshold", "", 0, 100, 5)
MPHPAbuse.font = Renderer.LoadFont("Tahoma", 18, Enum.FontWeight.BOLD)
MPHPAbuse.items = {
	item_soul_ring = true,
	item_arcane_boots = true,
	item_magic_wand = true,
	item_magic_stick = true,
	item_guardian_greaves = true,
	item_enchanted_mango = true,
	item_cheese = true,
	item_mekansm = true,
	item_faerie_fire = true
}
local changed = false
local dropped = 0
local toggled = false
local needSwap = false
local time
local nextTick = 0
local nextTick2 = 0
local x,y
local myHero, myPlayer
MPHPAbuse.itemsSlots = {}

function MPHPAbuse.Init()
	myHero = Heroes.GetLocal()
	myPlayer = Players.GetLocal()
	nextTick = 0
	nextTick2 = 0
	x, y = Renderer.GetScreenSize()
	x = math.floor(x * 0.59)
	y = math.floor(y * 0.8426)
	y = y - 40	
end
MPHPAbuse.Init()

function MPHPAbuse.OnGameStart()
	MPHPAbuse.Init()
end

function MPHPAbuse.OnGameEnd()
	MPHPAbuse.Init()
end

function MPHPAbuse.OnPrepareUnitOrders(orders)
	if not myHero or not Engine.IsInGame() or not Menu.IsEnabled(MPHPAbuse.optionEnable) or not orders or not Entity.IsAbility(orders.ability) then return true end
	if not toggled then return true end
	if Entity.GetHealth(myHero)/Entity.GetMaxHealth(myHero) < Menu.GetValue(MPHPAbuse.threshold)/100 then return true end
	if orders.order ~= 8 then return true end
	if Entity.IsAlive(myHero) and not NPC.IsStunned(myHero) then
	local name = Ability.GetName(orders.ability)
		if MPHPAbuse.items[name] then
			changed = true
			for i = 0, 5 do
				local item = NPC.GetItemByIndex(myHero, i)
				if item ~= nil then
					if Ability.GetLevelSpecialValueFor(item, "bonus_strength") > 0 and Ability.GetName(orders.ability) ~= Ability.GetName(item)
					or Ability.GetLevelSpecialValueFor(item, "bonus_intellect") > 0 and Ability.GetName(orders.ability) ~= Ability.GetName(item)
					or Ability.GetLevelSpecialValueFor(item, "bonus_all_stats") > 0 and Ability.GetName(orders.ability) ~= Ability.GetName(item)
					or Ability.GetLevelSpecialValueFor(item, "bonus_health") > 0 and Ability.GetName(orders.ability) ~= Ability.GetName(item)
					or Ability.GetLevelSpecialValueFor(item, "bonus_mana") > 0 and Ability.GetName(orders.ability) ~= Ability.GetName(item) then
						MPHPAbuse.itemsSlots[item] = i		
						MPHPAbuse.dropItem(myHero, item)
						dropped = dropped + 1
					end
				end
			end
			if changed == true then 
				changed = false 
			end
		end
	end
	return true
end

function MPHPAbuse.AbuseBackPack()
	if not toggled then
		return
	end
	for i = 0, 5 do
		local item = NPC.GetItemByIndex(myHero, i)
		if item ~= 0 
		and Ability.GetLevelSpecialValueFor(item, "bonus_strength") > 0
		or Ability.GetLevelSpecialValueFor(item, "bonus_intellect") > 0
		or Ability.GetLevelSpecialValueFor(item, "bonus_all_stats") > 0
		or Ability.GetLevelSpecialValueFor(item, "bonus_health") > 0
		or Ability.GetLevelSpecialValueFor(item, "bonus_mana") > 0 then
			MPHPAbuse.itemsSlots[item] = i
			MPHPAbuse.moveItem(item, 6)
		end
		if i == 5 then
			nextTick = time + 0.35 + NetChannel.GetAvgLatency(Enum.Flow.FLOW_OUTGOING)
			needSwap = true
		end
	end
end

function MPHPAbuse.OnUpdate()
	if not Menu.IsEnabled(MPHPAbuse.optionEnable) or not myHero or not Engine.IsInGame() then return end
	if not myHero then return end
	time = GameRules.GetGameTime()
	if Menu.IsKeyDownOnce(MPHPAbuse.optionToggleKey) then
		if toggled == false then
			toggled = true
		else
			toggled = false	
		end	
	end
	if Menu.IsKeyDownOnce(MPHPAbuse.optionBackPackAbuseKey) and time >= nextTick2 then

		MPHPAbuse.AbuseBackPack()
		nextTick2 = time + 1
	end
	if needSwap and time >= nextTick then
		for i = 0, 8 do
			local item = NPC.GetItemByIndex(myHero, i)
			if item and item ~= 0 then
				if MPHPAbuse.itemsSlots[item] then
					if i ~= MPHPAbuse.itemsSlots[item] then
						MPHPAbuse.moveItem(item, MPHPAbuse.itemsSlots[item])
					end
				end
			end
		end
		needSwap = false
	end
end

function MPHPAbuse.OnDraw()
	if not Menu.IsEnabled(MPHPAbuse.optionEnable) or not myHero or not Engine.IsInGame() then return end
	if toggled then 
		Renderer.SetDrawColor(90, 255, 100)
		Renderer.DrawText(MPHPAbuse.font, x, y, "[MP/HP Abuse: ON]")
	else
		Renderer.SetDrawColor(255, 90, 100)
		Renderer.DrawText(MPHPAbuse.font, x, y, "[MP/HP Abuse: OFF]")	
	end	
end

function MPHPAbuse.OnEntityCreate(ent)
	if not myHero or not Engine.IsInGame() or not Menu.IsEnabled(MPHPAbuse.optionEnable) then return end
	if not toggled then return end
	if Entity.GetClassName(ent) == "C_DOTA_Item_Physical" and dropped > 0 then
		MPHPAbuse.pickItem(myHero, ent)
		dropped = dropped - 1
		if dropped == 0 then
			needSwap = true
			nextTick = time + 0.1 + NetChannel.GetAvgLatency(Enum.Flow.FLOW_OUTGOING)
		end
	end
end

function MPHPAbuse.moveItem(item, newPos)
	Player.PrepareUnitOrders(myPlayer, Enum.UnitOrder.DOTA_UNIT_ORDER_MOVE_ITEM, newPos, Vector(0,0,0), item, Enum.PlayerOrderIssuer.DOTA_ORDER_ISSUER_PASSED_UNIT_ONLY, myHero)
end

function MPHPAbuse.dropItem(myHero, item)
	Player.PrepareUnitOrders(myPlayer, Enum.UnitOrder.DOTA_UNIT_ORDER_DROP_ITEM, nil, Entity.GetAbsOrigin(myHero), item, Enum.PlayerOrderIssuer.DOTA_ORDER_ISSUER_PASSED_UNIT_ONLY, myHero)
end

function MPHPAbuse.pickItem(myHero, item)
	Player.PrepareUnitOrders(myPlayer, Enum.UnitOrder.DOTA_UNIT_ORDER_PICKUP_ITEM, item, Vector(0, 0, 0), nil, Enum.PlayerOrderIssuer.DOTA_ORDER_ISSUER_PASSED_UNIT_ONLY, myHero)
end

return MPHPAbuse